Codebase Tree Structure:
========================
AI-DESIGN-FLOW
  ├── .next
  │   └── ... (contents hidden)
  ├── app
  │   ├── api
  │   │   ├── generate-mockup
  │   │   │   └── route.ts
  │   │   └── generate-questions
  │   │       └── route.ts
  │   ├── preview
  │   │   └── page.tsx
  │   ├── qna
  │   │   └── page.tsx
  │   ├── favicon.ico
  │   ├── globals.css
  │   ├── layout.tsx
  │   └── page.tsx
  ├── components
  │   ├── Canvas.tsx
  │   ├── CanvasTree.tsx
  │   ├── HeaderToolbar.tsx
  │   ├── PreviewArea.tsx
  │   ├── PromptInput.tsx
  │   └── QAPanel.tsx
  ├── node_modules
  │   └── ... (contents hidden)
  ├── public
  │   ├── file.svg
  │   ├── globe.svg
  │   ├── next.svg
  │   ├── vercel.svg
  │   └── window.svg
  ├── types
  │   └── index.ts
  ├── .env.local
  ├── .gitignore
  ├── codebase.txt
  ├── Concept.txt
  ├── eslint.config.mjs
  ├── generateCodebase.js
  ├── next-env.d.ts
  ├── next.config.ts
  ├── package-lock.json
  ├── package.json
  ├── postcss.config.mjs
  ├── README.md
  ├── tailwind.config.ts
  └── tsconfig.json


File Contents:
==============

----- /Users/jackcrawford/ai-design-flow/app/api/generate-mockup/route.ts -----
import { NextRequest, NextResponse } from 'next/server';

export async function POST(request: NextRequest) {
  try {
    const { prompt, answers } = await request.json();

    // TODO: Implement mockup generation logic
    const generatedContent = {
      requirements: '- Requirement 1\n- Requirement 2\n- Requirement 3',
      uiCode: '<div>Sample UI Code</div>',
    };

    return NextResponse.json(generatedContent);
  } catch (error) {
    console.error('Error generating mockup:', error);
    return NextResponse.json(
      { error: 'Failed to generate mockup' },
      { status: 500 }
    );
  }
} 

----- /Users/jackcrawford/ai-design-flow/app/api/generate-questions/route.ts -----
// /app/api/generate-questions/route.ts
import { NextRequest, NextResponse } from 'next/server';
import OpenAI from 'openai';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export async function POST(request: NextRequest) {
  try {
    const { prompt, previousQuestions } = await request.json();

    const messages = [
      {
        role: 'system' as const,
        content:
          'You are an expert design assistant that helps generate follow-up questions for a design prompt. Your questions are clear, concise, and focused on gathering detailed design requirements.',
      },
      {
        role: 'user' as const,
        content: `The design prompt is: "${prompt}".
Previous Q&A history: ${JSON.stringify(previousQuestions)}.
Based on this information, generate up to three clear follow-up questions as a JSON array.
For example: ["Is the elevator primarily for humans or machinery?", "What is the total number of floors?", "Is there a known budget constraint?"]`,
      },
    ];

    const completion = await openai.chat.completions.create({
      model: 'gpt-4',
      messages,
      max_tokens: 150,
    });

    const content = completion.choices[0].message.content?.trim();
    let questions: string[] = [];

    try {
      questions = JSON.parse(content!);
      if (!Array.isArray(questions)) {
        throw new Error("Output is not an array");
      }
    } catch (jsonError) {
      // Fallback: if JSON parsing fails, split by newline
      questions = content?.split('\n').filter((line) => line.trim() !== '') || [];
    }

    if (!questions || questions.length === 0) {
      throw new Error('No questions generated.');
    }

    return NextResponse.json({ questions });
  } catch (error) {
    console.error('Error generating questions:', error);
    return NextResponse.json(
      { error: 'Failed to generate questions' },
      { status: 500 }
    );
  }
}


----- /Users/jackcrawford/ai-design-flow/app/preview/page.tsx -----
'use client';

import { useEffect, useState } from 'react';
import PreviewArea from '@/components/PreviewArea';
import HeaderToolbar from '@/components/HeaderToolbar';

export default function PreviewPage() {
  const [generatedContent, setGeneratedContent] = useState({
    requirements: '',
    uiCode: '',
  });

  useEffect(() => {
    const storedContent = localStorage.getItem('generatedContent');
    if (storedContent) {
      setGeneratedContent(JSON.parse(storedContent));
    }
  }, []);

  return (
    <div className="min-h-screen flex flex-col">
      <HeaderToolbar />
      <main className="flex-1 container mx-auto px-4 py-8">
        <h1 className="text-3xl font-bold mb-8">Generated Preview</h1>
        <PreviewArea
          requirements={generatedContent.requirements}
          uiCode={generatedContent.uiCode}
        />
      </main>
    </div>
  );
}

----- /Users/jackcrawford/ai-design-flow/app/qna/page.tsx -----
// /app/qna/page.tsx
'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { v4 as uuidv4 } from 'uuid';
import HeaderToolbar from '../../components/HeaderToolbar';
import QAPanel from '../../components/QAPanel';
import CanvasTree from '../../components/CanvasTree';
import { QANode } from '../../types';

export default function QnAPage() {
  const router = useRouter();
  const [prompt, setPrompt] = useState<string>('');
  const [qaTree, setQaTree] = useState<QANode | null>(null);
  const [currentNode, setCurrentNode] = useState<QANode | null>(null);
  // Store the array of nodes at the current level and an index pointer
  const [currentLevelNodes, setCurrentLevelNodes] = useState<QANode[]>([]);
  const [currentIndex, setCurrentIndex] = useState<number>(0);

  // Fetch multiple questions for a given parent node and update its children
  // /app/qna/page.tsx
// /app/qna/page.tsx (updated fetchQuestions function)
const fetchQuestions = async (designPrompt: string, parentNode: QANode) => {
  try {
    const response = await fetch('/api/generate-questions', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        prompt: designPrompt,
        previousQuestions: [] // Optionally, pass parent-specific history here
      }),
    });
    const data = await response.json();
    
    // Extract the first question from the returned array.
    const questionText =
      data.questions && data.questions.length > 0
        ? data.questions[0]
        : 'No question returned.';
    
    const newChild: QANode = {
      id: uuidv4(),
      question: questionText,
      children: [],
    };

    // Helper function to immutably update the tree.
    const updateTree = (node: QANode): QANode => {
      // If this is the node we're targeting, add the new child.
      if (node.id === parentNode.id) {
        return {
          ...node,
          children: [...node.children, newChild],
        };
      }
      // Otherwise, update any children recursively.
      return {
        ...node,
        children: node.children.map(child => updateTree(child)),
      };
    };

    // Use the functional state updater to get the latest tree.
    setQaTree((prevTree) => (prevTree ? updateTree(prevTree) : prevTree));
    setCurrentNode(newChild);
  } catch (error) {
    console.error("Error fetching questions:", error);
  }
};


  // On mount: load the stored prompt, create the root node, and fetch top-level questions.
  useEffect(() => {
    const storedPrompt = localStorage.getItem('designPrompt');
    if (storedPrompt) {
      setPrompt(storedPrompt);
      const rootNode: QANode = {
        id: uuidv4(),
        question: `Prompt: ${storedPrompt}`,
        children: [],
      };
      setQaTree(rootNode);
      // Fetch top-level (sibling) questions for the root node
      fetchQuestions(storedPrompt, rootNode);
    } else {
      console.error("No design prompt found.");
      router.push('/');
    }
  }, []);

  // Handle answer submission for the current question.
  const handleAnswer = async (answer: string) => {
    if (!currentNode) return;

    // Save the answer on the current node
    currentNode.answer = answer;

    // Update the tree state first
    setQaTree({ ...qaTree! });

    // Fetch the next question for this node
    await fetchQuestions(prompt, currentNode);
  };

  return (
    <div className="min-h-screen flex flex-col bg-gray-100">
      <HeaderToolbar />
      <main className="flex-1 flex">
        {/* Left: Canvas Tree view */}
        <div className="w-2/3 p-6 overflow-auto">
          <div className="bg-white rounded-lg shadow-lg p-6 min-h-full">
            <h2 className="text-2xl font-bold mb-6 text-gray-900">Question Tree</h2>
            <CanvasTree node={qaTree} />
          </div>
        </div>
        
        {/* Right: Q&A Panel */}
        <div className="w-1/3 p-6 overflow-auto border-l border-gray-200">
          <QAPanel
            currentQuestion={
              currentNode
                ? currentNode.question
                : "No more questions. Q&A complete."
            }
            onSubmitAnswer={handleAnswer}
          />
        </div>
      </main>
    </div>
  );
}


----- /Users/jackcrawford/ai-design-flow/app/globals.css -----
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
}


----- /Users/jackcrawford/ai-design-flow/app/layout.tsx -----
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}


----- /Users/jackcrawford/ai-design-flow/app/page.tsx -----
// app/page.tsx
'use client';

import { useRouter } from 'next/navigation';
import PromptInput from '@/components/PromptInput';

export default function PromptPage() {
  const router = useRouter();

  const handlePromptSubmit = (prompt: string) => {
    console.log("User prompt:", prompt);
    // Save the prompt in localStorage so the QnA page can access it
    localStorage.setItem('designPrompt', prompt);
    router.push('/qna');
  };

  return (
    <div className="min-h-screen flex flex-col justify-center items-center bg-gray-50 px-4">
      {/* Header */}
      <header className="mb-8 text-center">
        <h1 className="text-4xl font-bold text-gray-800">Welcome to AI Design Flow</h1>
        <p className="mt-4 text-lg text-gray-600">
          Enter your design prompt to kick off your interactive design journey.
        </p>
      </header>
      
      {/* Prompt Input */}
      <div className="w-full max-w-2xl">
        <PromptInput onSubmit={handlePromptSubmit} />
      </div>
    </div>
  );
}


----- /Users/jackcrawford/ai-design-flow/components/Canvas.tsx -----
interface CanvasProps {
  answers: Array<{ question: string; answer: string }>;
}

export default function Canvas({ answers }: CanvasProps) {
  return (
    <div className="bg-gray-50 rounded-lg p-6 overflow-auto">
      <h2 className="text-xl font-semibold mb-4">Design Flow</h2>
      <div className="space-y-4">
        {answers.map((item, index) => (
          <div key={index} className="bg-white p-4 rounded-lg shadow">
            <p className="font-medium text-gray-700 mb-2">Q: {item.question}</p>
            <p className="text-gray-600">A: {item.answer}</p>
          </div>
        ))}
      </div>
    </div>
  );
} 

----- /Users/jackcrawford/ai-design-flow/components/CanvasTree.tsx -----
// components/CanvasTree.tsx
import React from 'react';
import { QANode } from '@/types'; // if you're using a separate types file

interface CanvasTreeProps {
  node: QANode | null;
  depth?: number;
}

const CanvasTree: React.FC<CanvasTreeProps> = ({ node, depth = 0 }) => {
  if (!node) return null;

  return (
    <div style={{ marginLeft: depth * 16 }} className="mb-4">
      <div className="p-2 border rounded mb-2 bg-white shadow">
        <p className="font-medium text-gray-900">{node.question}</p>
        {node.answer && <p className="text-gray-800">Answer: {node.answer}</p>}
      </div>
      {node.children?.map((child: QANode) => (
        <CanvasTree key={child.id} node={child} depth={depth + 1} />
      ))}
    </div>
  );
};

export default CanvasTree;


----- /Users/jackcrawford/ai-design-flow/components/HeaderToolbar.tsx -----
import Link from 'next/link';

export default function HeaderToolbar() {
  return (
    <header className="bg-white border-b">
      <div className="w-2/3 pl-6">
        <div className="flex items-center justify-between py-4">
          <div className="flex items-center space-x-6">
            <Link href="/" className="text-xl font-bold text-gray-900 hover:text-blue-600 transition-colors">
              AI Design Flow
            </Link>
            <nav className="hidden sm:flex space-x-6">
              <Link href="/qna" className="text-gray-600 hover:text-gray-900">Q&A</Link>
              <Link href="/preview" className="text-gray-600 hover:text-gray-900">Preview</Link>
            </nav>
          </div>
          <div className="flex items-center">
            <button className="text-gray-600 hover:text-gray-900">
              <span className="sr-only">Settings</span>
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
              </svg>
            </button>
          </div>
        </div>
      </div>
    </header>
  );
} 

----- /Users/jackcrawford/ai-design-flow/components/PreviewArea.tsx -----
interface PreviewAreaProps {
  requirements: string;
  uiCode: string;
}

export default function PreviewArea({ requirements, uiCode }: PreviewAreaProps) {
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
      <div className="bg-white rounded-lg p-6 shadow-lg">
        <h2 className="text-xl font-semibold mb-4">Requirements</h2>
        <pre className="whitespace-pre-wrap font-mono text-sm bg-gray-50 p-4 rounded">
          {requirements}
        </pre>
      </div>
      <div className="bg-white rounded-lg p-6 shadow-lg">
        <h2 className="text-xl font-semibold mb-4">Generated UI Code</h2>
        <pre className="whitespace-pre-wrap font-mono text-sm bg-gray-50 p-4 rounded overflow-auto">
          {uiCode}
        </pre>
      </div>
    </div>
  );
} 

----- /Users/jackcrawford/ai-design-flow/components/PromptInput.tsx -----
// components/PromptInput.tsx
import React, { useState } from 'react';

interface PromptInputProps {
  onSubmit: (prompt: string) => void;
}

const PromptInput: React.FC<PromptInputProps> = ({ onSubmit }) => {
  const [prompt, setPrompt] = useState('');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (prompt.trim()) {
      onSubmit(prompt);
      setPrompt('');
    }
  };

  return (
    <div className="p-8 w-full max-w-2xl">
      <form onSubmit={handleSubmit} className="flex flex-col gap-4">
        <label htmlFor="prompt" className="text-xl font-bold text-white">
          Enter your design prompt:
        </label>
        <textarea
          id="prompt"
          value={prompt}
          onChange={(e) => setPrompt(e.target.value)}
          placeholder="Design the interface for a 1000-floor elevator"
          className="border border-gray-300 p-4 rounded-lg h-48 text-gray-900 text-base resize-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
        />
        <button 
          type="submit" 
          className="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors font-medium"
        >
          Start Q&A
        </button>
      </form>
    </div>
  );
};

export default PromptInput;

----- /Users/jackcrawford/ai-design-flow/components/QAPanel.tsx -----
import { useState } from 'react';

interface QAPanelProps {
  currentQuestion: string;
  onSubmitAnswer: (answer: string) => void;
}

export default function QAPanel({ currentQuestion, onSubmitAnswer }: QAPanelProps) {
  const [answer, setAnswer] = useState('');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (answer.trim()) {
      onSubmitAnswer(answer);
      setAnswer('');
    }
  };

  return (
    <div className="bg-white rounded-lg p-6 shadow-lg">
      <div className="mb-6">
        <h3 className="text-lg font-semibold text-gray-900 mb-2">Current Question:</h3>
        <p className="text-gray-800">{currentQuestion}</p>
      </div>
      <form onSubmit={handleSubmit}>
        <div className="space-y-4">
          <textarea
            value={answer}
            onChange={(e) => setAnswer(e.target.value)}
            className="w-full h-32 p-3 border rounded-lg resize-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
            placeholder="Type your answer..."
          />
          <button
            type="submit"
            className="w-full px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
          >
            Submit Answer
          </button>
        </div>
      </form>
    </div>
  );
} 

----- /Users/jackcrawford/ai-design-flow/types/index.ts -----
export interface QANode {
  id: string;
  question: string;
  answer?: string;
  children: QANode[];
} 

----- /Users/jackcrawford/ai-design-flow/.env.local -----
OPENAI_API_KEY=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 

----- /Users/jackcrawford/ai-design-flow/.gitignore -----
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts


----- /Users/jackcrawford/ai-design-flow/next-env.d.ts -----
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.


----- /Users/jackcrawford/ai-design-flow/next.config.ts -----
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;


----- /Users/jackcrawford/ai-design-flow/package.json -----
{
  "name": "ai-design-flow",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "next": "15.1.6",
    "openai": "^4.83.0",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "uuid": "^11.0.5"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.1.6",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}


----- /Users/jackcrawford/ai-design-flow/tailwind.config.ts -----
import type { Config } from "tailwindcss";

export default {
  content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      colors: {
        background: "var(--background)",
        foreground: "var(--foreground)",
      },
    },
  },
  plugins: [],
} satisfies Config;


----- /Users/jackcrawford/ai-design-flow/tsconfig.json -----
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}


